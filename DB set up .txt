-- ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'root';
drop database ProjectProDB;
create database ProjectProDB;
create table ProjectProDB.WORKERS
	(Worker_ID integer NOT NULL,
    Start_date date not null,
    First_name VARCHAR(20) NOT NULL,
    Last_name VARCHAR(40) NOT NULL,
    Worker_type varchar(20) not null,
	SSN char(9),
    Salary INT not null,
    primary key (Worker_ID)
    );
create table ProjectProDB.WORKER_EMAILS
	(Worker_ID integer not null,
    Email varchar(50) not null,
    primary key (Worker_ID, Email),
    foreign key (Worker_ID) references ProjectProDB.WORKERS (Worker_ID) on delete cascade on update cascade
    );
create table ProjectProDB.WORKER_PHONE_NUMBERS
	(Worker_ID integer not null,
    Phone_number varchar(20) not null,
    primary key (Worker_ID, Phone_number),
    foreign key (Worker_ID) references ProjectProDB.WORKERS (Worker_ID) on delete cascade on update cascade
    );
create table ProjectProDB.TEAMS
	(Team_ID integer not null,
    Supervisor_ID integer not null,
    Team_name varchar(50),
    primary key (Team_ID),
    foreign key (Supervisor_ID) references ProjectProDB.WORKERS (Worker_ID) on delete cascade on update cascade
    );
create table ProjectProDB.IS_PART_OF
	(Worker_ID integer not null,
    Team_ID integer not null,
    primary key (Worker_ID, Team_ID),
    foreign key (Worker_ID) references ProjectProDB.WORKERS (Worker_ID) on delete cascade on update cascade,
    foreign key (Team_ID) references ProjectProDB.TEAMS (Team_ID) on delete cascade on update cascade
    );

create table ProjectProDB.TASKS
	(Task_ID integer not null,
    Task_name varchar(20) not null,
    Task_description varchar(200),
    primary key (Task_ID)
    );
create table ProjectProDB.DESIRES
	(Task_ID integer not null,
    Worker_ID integer not null,
    primary key (Task_ID, Worker_ID),
    foreign key (Task_ID) references ProjectProDB.TASKS (Task_ID) on delete cascade on update cascade,
    foreign key (Worker_ID) references ProjectProDB.WORKERS (Worker_ID) on delete cascade on update cascade
    );
    
create table ProjectProDB.STRENGTHS
	(Strength_ID integer not null,
    Strength_name varchar(20) not null,
    Strength_description varchar(200),
    primary key (Strength_ID),
    unique (Strength_name)
    );    
    
create table ProjectProDB.ASSOCIATED_STRENGTHS
	(Task_ID integer not null,
    Strength_ID integer not null,
    primary key (Task_ID, Strength_ID),
    foreign key (Task_ID) references ProjectProDB.TASKS (Task_ID) on delete cascade on update cascade,
    foreign key (Strength_ID) references ProjectProDB.STRENGTHS (Strength_ID) on delete cascade on update cascade
    );
    
create table ProjectProDB.PROJECTS
	(Project_ID integer not null,
    Project_name VARCHAR(20) not null,
    Project_description varchar(200),
    primary key (Project_ID)
    );
    
create table ProjectProDB.WORKS_ON
	(Project_ID integer not null,
    Team_ID integer not null,
    primary key (Project_ID, Team_ID),
    foreign key (Project_ID) references ProjectProDB.PROJECTS (Project_ID) on delete cascade on update cascade,
    foreign key (Team_ID) references ProjectProDB.TEAMS (Team_ID) on delete cascade on update cascade
    );
    
create table ProjectProDB.PROJECT_TASKS
	(Worker_ID integer not null,
    Task_ID integer not null,
    Project_ID integer not null,
    Team_ID integer not null,
    primary key (Worker_ID, Task_ID, Project_ID, Team_ID),
    foreign key (Worker_ID) references ProjectProDB.WORKERS (Worker_ID) on delete cascade on update cascade,
    foreign key (Task_ID) references ProjectProDB.TASKS (Task_ID) on delete cascade on update cascade,
    foreign key (Project_ID) references ProjectProDB.PROJECTS (Project_ID) on delete cascade on update cascade,
    foreign key (Team_ID) references ProjectProDB.TEAMS (Team_ID) on delete cascade on update cascade
    );
    
create table ProjectProDB.WORKER_HAS_STRENGTHS
	(Worker_ID integer not null,
    Strength_ID integer not null,
    Strength_rank integer not null,
    primary key (Worker_ID, Strength_ID),
    foreign key (Worker_ID) references ProjectProDB.WORKERS (Worker_ID) on delete cascade on update cascade,
    foreign key (Strength_ID) references ProjectProDB.STRENGTHS (Strength_ID) on delete cascade on update cascade
    );

create table ProjectProDB.ACCOUNT_ACCESS
	(Username varchar(20) not null,
    Password varchar(20) not null,
    Access_level integer not null,
    Worker_ID integer not null,
    primary key (Username),
    foreign key (Worker_ID) references ProjectProDB.WORKERS (Worker_ID) on delete cascade on update cascade
    );
    
create table ProjectProDB.CAUSES
	(Cause_ID integer not null,
    Cause_name varchar(75) not null,
    Cause_description varchar(200) not null,
    primary key (Cause_ID)
    );

create table ProjectProDB.DEDICATED_TO
	(Project_ID integer not null,
    Cause_ID integer not null,
    primary key (Project_ID, Cause_ID),
    foreign key (Cause_ID) references ProjectProDB.CAUSES (Cause_ID) on delete cascade on update cascade,
	foreign key (Project_ID) references ProjectProDB.PROJECTS (Project_ID) on delete cascade on update cascade
    );

create table ProjectProDB.DONORS
	(Donor_ID integer not null,
    First_name varchar(20) not null,
    Last_name varchar(30) not null,
    Mailing_address varchar(50),
    primary key (Donor_ID)
    );

create table ProjectProDB.DONOR_PHONE_NUMBERS
	(Donor_ID integer not null,
    Phone_number varchar(20) not null,
    primary key (Donor_ID, Phone_number),
    foreign key (Donor_ID) references ProjectProDB.DONORS (Donor_ID) on delete cascade on update cascade
    );

create table ProjectProDB.DONOR_EMAILS
	(Donor_ID integer not null,
    Email varchar(50) not null,
    primary key (Donor_ID, Email),
    foreign key (Donor_ID) references ProjectProDB.DONORS (Donor_ID) on delete cascade on update cascade
    );

create table ProjectProDB.DONATIONS
	(Donation_ID integer not null,
    Cause_ID integer not null,
    Donor_ID integer not null,
    Amount integer not null,
    primary key (Donation_ID),
    foreign key (Cause_ID) references ProjectProDB.CAUSES (Cause_ID) on delete cascade on update cascade,
    foreign key (Donor_ID) references ProjectProDB.DONORS (Donor_ID) on delete cascade on update cascade
    );
    


insert into ProjectProDB.WORKERS 
values (1, '1000-01-01', 'RootAdmin', 'RootAdmin', 'Employee', '000000000', 0);

insert into ProjectProDB.ACCOUNT_ACCESS
values ('admin', 'admin', 3, 1);

-- insert into ProjectProDB.WORKER_EMAILS 
-- values (1, 'ttdjohnston@gmail.com'),

-- insert into ProjectProDB.WORKER_PHONE_NUMBERS
-- values (1, '12342363456'),
        
-- insert into ProjectProDB.STRENGTHS
-- values (1, 'First Str', ''),
        
-- insert into ProjectProDB.WORKER_HAS_STRENGTHS
-- values (1, 5, 1),
        
-- insert into ProjectProDB.TASKS
-- values (1, 'tie the noose', 'your best sailor impression'),
        
-- insert into ProjectProDB.DESIRES
-- values (1, 1),
        
-- insert into ProjectProDB.PROJECTS
-- values (1, 'aosiidfn', 'aisodfnaoisdfnoa'),
-- 		(2, 'dream team', 'the best around'),
--         (3, 'hanging', 'your best wind chime impression'),
-- 		(4, 'electric chair', 'what happens next will shock you');
        
-- insert into projectprodb.TEAMS
-- values (1, 2, 'capital punishment'),
-- 		(2, 4, 'Assisted Suicide');

-- insert into projectprodb.IS_PART_OF
-- values (2, 1),
-- 		(3, 1),
--         (4, 2);
        
-- insert into projectprodb.WORKS_ON
-- values (2, 1),
-- 		(3, 1),
-- 		(4, 1),
--         (1, 1),
--         (4, 2);
        
-- insert into ProjectProDB.ASSOCIATED_STRENGTHS
-- values (1, 1);

-- insert into ProjectProDB.PROJECT_TASKS
-- values (2, 1, 2, 1),
        
-- insert into ProjectProDB.CAUSES
-- values (1, 'Helping the poor', 'be nice for once'),


-- insert into ProjectProDB.DEDICATED_TO
-- values (1, 1),

        
-- insert into ProjectProDB.DONORS
-- values (1, 'Uncle', 'Joe', 'gulag144 Vostok ave Russia');

-- insert into projectprodb.DONOR_EMAILS
-- values (1, 'gulag144@siberia.ru');

-- insert into projectprodb.DONOR_PHONE_NUMBERS
-- values (1, '7-346-2737373');

-- insert into projectprodb.DONATIONS
-- values (1, 2, 1, 500000000);


